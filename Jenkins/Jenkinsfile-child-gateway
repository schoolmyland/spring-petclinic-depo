pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_TAG', defaultValue: '', description: 'Docker tag versioning')
        string(name: 'CLIENT_NAME', defaultValue: '', description: 'Name of the client')
        string(name: 'HEX_CODE', defaultValue: '', description: 'Hex code for the main color')
        string(name: 'NODE_PORT', defaultValue: '', description: 'NodePort for the env')
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Display name for the build')
        string(name: 'DESCRIPTION', defaultValue: '', description: 'Description for the build')
    }
    environment {
        DOCKER_IMAGE = "spring-petclinic-api-gateway"
    }
    stages {
        stage('Parametrage') {
            steps {
                script {
                    currentBuild.displayName = params.DISPLAY_NAME
                    currentBuild.description = params.DESCRIPTION
					
                }
            }
        }
	stage('Recup css and transform') {
    	    steps {
        	script {
                    sh """
            	    cp ./src/main/less/header.less ${JENK_TOOLBOX}/custom/${params.CLIENT_NAME}/
                    cp ./src/main/less/petclinic.less ${JENK_TOOLBOX}/custom/${params.CLIENT_NAME}/
                    sed -i 's/#6db33f/${params.HEX_CODE}/g' ${JENK_TOOLBOX}/custom/${params.CLIENT_NAME}/header.less
                    sed -i 's/#6db33f/${params.HEX_CODE}/g' ${JENK_TOOLBOX}/custom/${params.CLIENT_NAME}/petclinic.less
            	    """
                }
    	    }
	}
        stage('Customisation build image') {
            environment {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS")
            }
            steps {
                script {
                    sh """
                    cp $JENK_TOOLBOX/custom/${params.CLIENT_NAME}/img/* ./src/main/resources/static/images/
                    cp $JENK_TOOLBOX/custom/${params.CLIENT_NAME}/*.less ./src/main/less/
                    docker build -t localhost:5000/${DOCKER_IMAGE}:qa-${params.CLIENT_NAME} .
                    docker push localhost:5000/${DOCKER_IMAGE}:qa-${params.CLIENT_NAME}
                    sleep 10
                    """
                }
            }
        }
        stage('Deploiement QA par client') {
            environment {
                KUBECONFIG = credentials("confkub")
                BDD_PASS = credentials("bdd_pass_dev")
            }
            steps {
                sh """
                ${JENK_TOOLBOX}/ctrl/checkNamespaceUse.sh developpement qa-${params.CLIENT_NAME}
                cp -r ${JENK_TOOLBOX}/helm/* ./
                rm -Rf .kube
                mkdir .kube
                ls
                cat \$KUBECONFIG > .kube/config
                helm install qa-${params.CLIENT_NAME} petclinic-dev --values=./petclinic-dev/value.yaml --set gatw.repo=localhost:5000 --set petclinic.bdpwd=\$BDD_PASS --set namespace=qa-${params.CLIENT_NAME} --set gatw.docker_tag=qa-${params.CLIENT_NAME} --set gatw.nodePort=${params.NODE_PORT}
                sleep 120 
                """
            }
        }
        stage('Test access client') {
            steps {
                script {
                    sh """
		    ${JENK_TOOLBOX}/ctrl/checkpod.sh qa-${params.CLIENT_NAME}
		    curl localhost:${params.NODE_PORT}
		    """
                }
            }
        }
        stage('Demontage Env client') {
            environment {
                KUBECONFIG = credentials("confkub")
            }
            steps {
                sh """
                rm -Rf .kube
                mkdir .kube
                ls
                cat ${KUBECONFIG} > .kube/config
                helm uninstall qa-${params.CLIENT_NAME}
                """
            }
        }
	stage('Push of the final image') {
            environment {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS")
            }
            steps {
                script {
                    sh """
		    docker login -u ${DOCKER_ID} -p $DOCKER_PASS
                    docker tag localhost:5000/${DOCKER_IMAGE}:qa-${params.CLIENT_NAME} ${DOCKER_ID}/${DOCKER_IMAGE}-${params.CLIENT_NAME}:latest
		    docker tag ${DOCKER_ID}/${DOCKER_IMAGE}-${params.CLIENT_NAME}:latest ${DOCKER_ID}/${DOCKER_IMAGE}-${params.CLIENT_NAME}:${params.DOCKER_TAG}
                    docker push ${DOCKER_ID}/${DOCKER_IMAGE}-${params.CLIENT_NAME}:latest
                    docker push ${DOCKER_ID}/${DOCKER_IMAGE}-${params.CLIENT_NAME}:${params.DOCKER_TAG}
                    sleep 10
                    """
                }
            }
        }
	stage('Mise en Production') {
            environment {
                CLUSTERNAME = credentials("cluster")
            }
            steps {
                withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                  credentialsId: "kube-admin",
                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                  sh '''
                  $JENK_TOOLBOX/ctrl/updatePod-gateway.sh $CLUSTERNAME petclinic-${params.CLIENT_NAME}
                  '''
                }
            }
        }
    }
}
